package ${package.Controller};

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.web.bind.annotation.*;
import org.springframework.validation.annotation.Validated;
import org.thenicesys.web.JsonResult;
import io.swagger.annotations.ApiOperation;
import org.thenicesys.data.api.Pager;
import com.jnetdata.simple.base.vo.PageVo1;

import org.thenicesys.restfulweb.module.EntityId;
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import ${package.Service}.${table.serviceName};
import ${package.Entity}.${table.entityName};

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("/${package.ModuleName}/${lowerCaseEntityName}")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    final private ${table.serviceName} ${lowerCaseFirstOneServiceName};
    final static private String BASEURL = "/${package.ModuleName}/${lowerCaseEntityName}";

    @Autowired
    public ${table.controllerName}(${table.serviceName} ${lowerCaseFirstOneServiceName}) {
        this.${lowerCaseFirstOneServiceName} = ${lowerCaseFirstOneServiceName};
    }

    /**
     * 执行新增操作
     * @param entity
     * @return
     */
    @PostMapping
    @ResponseBody
    public JsonResult<EntityId<Long>> add(@Validated @RequestBody ${table.entityName} entity) {
        return doAdd(getService(), entity);
    }

    /**
     * 执行删除操作
     * @param id
     * @return
     */
    @DeleteMapping("/{id}")
    @ResponseBody
    public JsonResult<Void> deleteById(@PathVariable("id") Long id) {
        return doDeleteById(getService(), id);
    }

    /**
     * 执行批量删除操作
     * @param ids
     * @return
     */
    @DeleteMapping("/{ids}/batch")
    @ResponseBody
    public JsonResult<Void> deleteBatchIds(@PathVariable("ids") String ids) {
        return doDeleteBatchIds(getService(), ids);
    }

    /**
     * 属性选择性更新操作
     * @param id
     * @param entity
     * @return
     */
    @ApiOperation(value = "选择性更新操作", notes="只更新entity中设置为非null的属性")
    @PutMapping("/{id}")
    @ResponseBody
    public JsonResult<Void> updateById(@PathVariable("id") Long id, @RequestBody ${table.entityName} entity) {
        return doUpdateById(getService(), id, entity);
    }

    /**
     * 全部属性更新操作
     * @param id
     * @param entity
     * @return
     */
    @ApiOperation(value = "执行修改操作", notes="注意必须提供实体的所有属性否则没有提供的属性将被设置为null")
    @PutMapping("/{id}/allColumn")
    @ResponseBody
    public JsonResult<Void> doUpdateAllColumnById(@PathVariable("id") Long id, @RequestBody ${table.entityName} entity) {
        return doUpdateAllColumnById(getService(), id, entity);
        }

    @ApiOperation(value = "查看", notes = "查看指定id的实体对象")
    @GetMapping("/{id}")
    @ResponseBody
    public JsonResult<${table.entityName}> getById(@PathVariable("id") Long id) {
        return doGetById(getService(), id);
    }

    /**
     * 跳转到查询页面
     * @return
     */
    @GetMapping(value = "/index")
    public String toList() {
        return pageFilePath("/list");
    }

    @ApiOperation(value = "查询", notes="根据vo指定条件进行查询")
    @PostMapping(value = "/list")
    @ResponseBody
    public JsonResult<Pager<${table.entityName}>> list(@ModelAttribute ${table.entityName} entity,@RequestBody PageVo1 pager) {
        return doList(getService(), pager, entity);
    }


    private ${table.serviceName} getService() {
        return this.${lowerCaseFirstOneServiceName};
    }

    private String pageFilePath(String url) {
        return super.webPath(BASEURL, url);
    }

}

#end